// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace earnings_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 28> locations_array__ =
  {" (found before start of program)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 17, column 2 to column 18)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 18, column 2 to column 22)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 26, column 2 to line 29, column 77)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 2, column 2 to column 17)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 3, column 9 to column 10)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 3, column 2 to column 24)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 4, column 9 to column 10)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 4, column 2 to column 20)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 5, column 9 to column 10)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 5, column 2 to column 24)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 6, column 9 to column 10)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 6, column 2 to column 21)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 7, column 9 to column 10)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 7, column 2 to column 19)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 8, column 9 to column 10)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 8, column 2 to column 18)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 9, column 9 to column 10)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 9, column 2 to column 17)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 10, column 9 to column 10)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 10, column 2 to column 19)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 11, column 9 to column 10)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 11, column 2 to column 18)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 12, column 9 to column 10)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 12, column 2 to column 24)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 13, column 9 to column 10)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 13, column 2 to column 20)",
  " (in '/mnt/c/Windows/System32/example-models-master/ARM/Ch.25/earnings.stan', line 14, column 2 to column 29)"};
class earnings_model final : public model_base_crtp<earnings_model> {
 private:
  int N;
  Eigen::Matrix<double,-1,1> any_charity_data__;
  Eigen::Matrix<double,-1,1> any_ssi_data__;
  Eigen::Matrix<double,-1,1> any_welfare_data__;
  Eigen::Matrix<double,-1,1> earnings_data__;
  Eigen::Matrix<double,-1,1> educ_r_data__;
  Eigen::Matrix<double,-1,1> immig_data__;
  Eigen::Matrix<double,-1,1> male_data__;
  Eigen::Matrix<double,-1,1> over65_data__;
  Eigen::Matrix<double,-1,1> white_data__;
  Eigen::Matrix<double,-1,1> workhrs_top_data__;
  Eigen::Matrix<double,-1,1> workmos_data__;
  double phi;
  Eigen::Map<Eigen::Matrix<double,-1,1>> any_charity{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> any_ssi{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> any_welfare{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> earnings{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> educ_r{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> immig{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> male{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> over65{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> white{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> workhrs_top{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> workmos{nullptr, 0};
 public:
  ~earnings_model() {}
  earnings_model(stan::io::var_context& context__, unsigned int
                 random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "earnings_model_namespace::earnings_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 4;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 4;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 4;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 5;
      stan::math::validate_non_negative_index("any_charity", "N", N);
      current_statement__ = 6;
      context__.validate_dims("data initialization", "any_charity", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      any_charity_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                             std::numeric_limits<double>::quiet_NaN());
      new (&any_charity)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(any_charity_data__.data(), N);
      {
        std::vector<local_scalar_t__> any_charity_flat__;
        current_statement__ = 6;
        any_charity_flat__ = context__.vals_r("any_charity");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(any_charity, any_charity_flat__[(pos__ - 1)],
            "assigning variable any_charity", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 7;
      stan::math::validate_non_negative_index("any_ssi", "N", N);
      current_statement__ = 8;
      context__.validate_dims("data initialization", "any_ssi", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      any_ssi_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                         std::numeric_limits<double>::quiet_NaN());
      new (&any_ssi)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(any_ssi_data__.data(), N);
      {
        std::vector<local_scalar_t__> any_ssi_flat__;
        current_statement__ = 8;
        any_ssi_flat__ = context__.vals_r("any_ssi");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 8;
          stan::model::assign(any_ssi, any_ssi_flat__[(pos__ - 1)],
            "assigning variable any_ssi", stan::model::index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 9;
      stan::math::validate_non_negative_index("any_welfare", "N", N);
      current_statement__ = 10;
      context__.validate_dims("data initialization", "any_welfare", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      any_welfare_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                             std::numeric_limits<double>::quiet_NaN());
      new (&any_welfare)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(any_welfare_data__.data(), N);
      {
        std::vector<local_scalar_t__> any_welfare_flat__;
        current_statement__ = 10;
        any_welfare_flat__ = context__.vals_r("any_welfare");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 10;
          stan::model::assign(any_welfare, any_welfare_flat__[(pos__ - 1)],
            "assigning variable any_welfare", stan::model::index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 11;
      stan::math::validate_non_negative_index("earnings", "N", N);
      current_statement__ = 12;
      context__.validate_dims("data initialization", "earnings", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      earnings_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                          std::numeric_limits<double>::quiet_NaN());
      new (&earnings)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(earnings_data__.data(), N);
      {
        std::vector<local_scalar_t__> earnings_flat__;
        current_statement__ = 12;
        earnings_flat__ = context__.vals_r("earnings");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 12;
          stan::model::assign(earnings, earnings_flat__[(pos__ - 1)],
            "assigning variable earnings", stan::model::index_uni(sym1__));
          current_statement__ = 12;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 13;
      stan::math::validate_non_negative_index("educ_r", "N", N);
      current_statement__ = 14;
      context__.validate_dims("data initialization", "educ_r", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      educ_r_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                        std::numeric_limits<double>::quiet_NaN());
      new (&educ_r)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(educ_r_data__.data(), N);
      {
        std::vector<local_scalar_t__> educ_r_flat__;
        current_statement__ = 14;
        educ_r_flat__ = context__.vals_r("educ_r");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 14;
          stan::model::assign(educ_r, educ_r_flat__[(pos__ - 1)],
            "assigning variable educ_r", stan::model::index_uni(sym1__));
          current_statement__ = 14;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 15;
      stan::math::validate_non_negative_index("immig", "N", N);
      current_statement__ = 16;
      context__.validate_dims("data initialization", "immig", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      immig_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&immig)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(immig_data__.data(), N);
      {
        std::vector<local_scalar_t__> immig_flat__;
        current_statement__ = 16;
        immig_flat__ = context__.vals_r("immig");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 16;
          stan::model::assign(immig, immig_flat__[(pos__ - 1)],
            "assigning variable immig", stan::model::index_uni(sym1__));
          current_statement__ = 16;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 17;
      stan::math::validate_non_negative_index("male", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "male", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      male_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                      std::numeric_limits<double>::quiet_NaN());
      new (&male) Eigen::Map<Eigen::Matrix<double,-1,1>>(male_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> male_flat__;
        current_statement__ = 18;
        male_flat__ = context__.vals_r("male");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 18;
          stan::model::assign(male, male_flat__[(pos__ - 1)],
            "assigning variable male", stan::model::index_uni(sym1__));
          current_statement__ = 18;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 19;
      stan::math::validate_non_negative_index("over65", "N", N);
      current_statement__ = 20;
      context__.validate_dims("data initialization", "over65", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      over65_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                        std::numeric_limits<double>::quiet_NaN());
      new (&over65)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(over65_data__.data(), N);
      {
        std::vector<local_scalar_t__> over65_flat__;
        current_statement__ = 20;
        over65_flat__ = context__.vals_r("over65");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 20;
          stan::model::assign(over65, over65_flat__[(pos__ - 1)],
            "assigning variable over65", stan::model::index_uni(sym1__));
          current_statement__ = 20;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 21;
      stan::math::validate_non_negative_index("white", "N", N);
      current_statement__ = 22;
      context__.validate_dims("data initialization", "white", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      white_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&white)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(white_data__.data(), N);
      {
        std::vector<local_scalar_t__> white_flat__;
        current_statement__ = 22;
        white_flat__ = context__.vals_r("white");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 22;
          stan::model::assign(white, white_flat__[(pos__ - 1)],
            "assigning variable white", stan::model::index_uni(sym1__));
          current_statement__ = 22;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 23;
      stan::math::validate_non_negative_index("workhrs_top", "N", N);
      current_statement__ = 24;
      context__.validate_dims("data initialization", "workhrs_top", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      workhrs_top_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                             std::numeric_limits<double>::quiet_NaN());
      new (&workhrs_top)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(workhrs_top_data__.data(), N);
      {
        std::vector<local_scalar_t__> workhrs_top_flat__;
        current_statement__ = 24;
        workhrs_top_flat__ = context__.vals_r("workhrs_top");
        current_statement__ = 24;
        pos__ = 1;
        current_statement__ = 24;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 24;
          stan::model::assign(workhrs_top, workhrs_top_flat__[(pos__ - 1)],
            "assigning variable workhrs_top", stan::model::index_uni(sym1__));
          current_statement__ = 24;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 25;
      stan::math::validate_non_negative_index("workmos", "N", N);
      current_statement__ = 26;
      context__.validate_dims("data initialization", "workmos", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      workmos_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                         std::numeric_limits<double>::quiet_NaN());
      new (&workmos)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(workmos_data__.data(), N);
      {
        std::vector<local_scalar_t__> workmos_flat__;
        current_statement__ = 26;
        workmos_flat__ = context__.vals_r("workmos");
        current_statement__ = 26;
        pos__ = 1;
        current_statement__ = 26;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 26;
          stan::model::assign(workmos, workmos_flat__[(pos__ - 1)],
            "assigning variable workmos", stan::model::index_uni(sym1__));
          current_statement__ = 26;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 27;
      context__.validate_dims("data initialization", "phi", "double",
        std::vector<size_t>{});
      phi = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 27;
      phi = context__.vals_r("phi")[(1 - 1)];
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "phi", phi, 0);
      current_statement__ = 27;
      stan::math::check_less_or_equal(function__, "phi", phi, 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 11 + 1;
  }
  inline std::string model_name() const final {
    return "earnings_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = "};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "earnings_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(11, DUMMY_VAR__);
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(11);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      {
        current_statement__ = 3;
        lp_accum__.add((phi *
          stan::math::normal_lpdf<false>(earnings,
            stan::math::add(
              stan::math::add(
                stan::math::add(
                  stan::math::add(
                    stan::math::add(
                      stan::math::add(
                        stan::math::add(
                          stan::math::add(
                            stan::math::add(
                              stan::math::add(
                                stan::model::rvalue(beta, "beta",
                                  stan::model::index_uni(1)),
                                stan::math::multiply(
                                  stan::model::rvalue(beta, "beta",
                                    stan::model::index_uni(2)), male)),
                              stan::math::multiply(
                                stan::model::rvalue(beta, "beta",
                                  stan::model::index_uni(3)), over65)),
                            stan::math::multiply(
                              stan::model::rvalue(beta, "beta",
                                stan::model::index_uni(4)), white)),
                          stan::math::multiply(
                            stan::model::rvalue(beta, "beta",
                              stan::model::index_uni(5)), immig)),
                        stan::math::multiply(
                          stan::model::rvalue(beta, "beta",
                            stan::model::index_uni(6)), educ_r)),
                      stan::math::multiply(
                        stan::model::rvalue(beta, "beta",
                          stan::model::index_uni(7)), workmos)),
                    stan::math::multiply(
                      stan::model::rvalue(beta, "beta",
                        stan::model::index_uni(8)), workhrs_top)),
                  stan::math::multiply(
                    stan::model::rvalue(beta, "beta",
                      stan::model::index_uni(9)), any_ssi)),
                stan::math::multiply(
                  stan::model::rvalue(beta, "beta",
                    stan::model::index_uni(10)), any_welfare)),
              stan::math::multiply(
                stan::model::rvalue(beta, "beta", stan::model::index_uni(11)),
                any_charity)), sigma)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "earnings_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(11,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(11);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      out__.write(beta);
      out__.write(sigma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(11, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(11),
        "assigning variable beta");
      out__.write(beta);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 2;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(11)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(11, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= 11; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 2;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta", "sigma"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    11)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 11; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 11; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(11) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(11) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (11 + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (11 + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = earnings_model_namespace::earnings_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return earnings_model_namespace::profiles__;
}
#endif